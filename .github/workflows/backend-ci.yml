name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'EventPlatform.API/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'EventPlatform.API/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: |
        cd EventPlatform.API
        dotnet restore

    - name: Build
      run: |
        cd EventPlatform.API
        dotnet build --no-restore --configuration Release

    - name: Run unit tests
      run: |
        cd EventPlatform.API.Tests
        dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./EventPlatform.API.Tests/coverage/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

    - name: Run integration tests
      run: |
        cd EventPlatform.API.Tests
        dotnet test --filter "Category=Integration" --no-build --verbosity normal --configuration Release

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Run security scan
      run: |
        cd EventPlatform.API
        dotnet list package --vulnerable

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./EventPlatform.API
        push: true
        tags: |
          eventplatform/api:latest
          eventplatform/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/production/ 