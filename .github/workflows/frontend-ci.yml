name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'EventPlatform.Frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'EventPlatform.Frontend/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: EventPlatform.Frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd EventPlatform.Frontend
        npm ci

    - name: Run linting
      run: |
        cd EventPlatform.Frontend
        npm run lint

    - name: Run unit tests
      run: |
        cd EventPlatform.Frontend
        npm run test -- --watch=false --code-coverage --browsers=ChromeHeadless

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./EventPlatform.Frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build for production
      run: |
        cd EventPlatform.Frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: EventPlatform.Frontend/dist/

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: EventPlatform.Frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd EventPlatform.Frontend
        npm ci

    - name: Run E2E tests
      run: |
        cd EventPlatform.Frontend
        npm run e2e

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd EventPlatform.Frontend
        npm ci

    - name: Run security audit
      run: |
        cd EventPlatform.Frontend
        npm audit --audit-level=moderate

  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./EventPlatform.Frontend
        push: true
        tags: |
          eventplatform/frontend:latest
          eventplatform/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying frontend to staging environment..."
        # Add your deployment commands here
        # Example: aws s3 sync ./EventPlatform.Frontend/dist/ s3://your-staging-bucket/

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying frontend to production environment..."
        # Add your deployment commands here
        # Example: aws s3 sync ./EventPlatform.Frontend/dist/ s3://your-production-bucket/ 